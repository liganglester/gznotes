<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>外语 on 钢子笔记 </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://gznotes.net/categories/%E5%A4%96%E8%AF%AD/</link>
    <language>zh-cn</language>
    
    
    <updated>Wed, 10 Feb 2016 22:40:47 JST</updated>
    
    <item>
      <title>（译）15 Rules for Writing Quality Code</title>
      <link>http://gznotes.net/2016/02/10/15-rules-for-writing-quality-code/</link>
      <pubDate>Wed, 10 Feb 2016 22:40:47 JST</pubDate>
      
      <guid>http://gznotes.net/2016/02/10/15-rules-for-writing-quality-code/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.informit.com/articles/article.aspx?p=2223710&#34;&gt;英文原文地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Diomidis Spinellis, author of Code Quality: The Open Source Perspective, lists the 15 most important rules for writing sparkling code. Follow them, and your code will look professional, live long, grow smoothly, and earn your colleagues’ love (rather than swearing).&lt;/p&gt;

&lt;p&gt;对于如何写出高质量软件，《Code Quality: The Open Source Perspective》的作者Diomidis Spinellis列出了15条重要规则。遵守这些规则，你就可以写出专业的代码。而且你的代码会被持久使用，易于扩展。你的同事也会因此对你肃然起敬。&lt;/p&gt;

&lt;p&gt;There are myriad ways of writing poor code. Thankfully, rising to the level of writing quality programs involves just 15 rules. Following them won&amp;rsquo;t make you a master programmer, but will allow you to fake one quite convincingly.&lt;/p&gt;

&lt;p&gt;稍不留神我们就会写出一堆烂代码，写出好代码却不容易。不过，好在想写出高质量程序只需要下面的15条规则。遵守这些规则不能让你成为一位编程大师，不过会让你(提高不少)至少看起来很专业。&lt;/p&gt;

&lt;h2 id=&#34;rule-1-follow-the-style-guide:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 1: Follow the Style Guide&lt;/h2&gt;

&lt;p&gt;Every programming language has a style guide that tells you in great detail how to indent your code, where to put spaces and braces, how to name stuff, how to comment—all the good and bad practices. For example, the style guide tells you the 12 mistakes lurking in this code snippet:&lt;/p&gt;

&lt;p&gt;规则1：遵守编程规约。
每种编程语言都有编程规约。规约里会详细规定如何缩进，怎么合理安排余白和使用括号，如何给函数和变量等命名，怎么写注释等等，介绍很多好的和不好的做法。比如：编程规约里会举下面的例子，告诉你里面隐藏了12个编程规约方面的错误。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;for(i=0 ;i&amp;lt;10 ;i++){
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;钢子：我实在找不出12个，可能是老外夸张？
我找到的只有： 1. 常数10应该用个更有意义的变量或者常量代替 2. 再多用些空格分隔。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Read the guide carefully, learn the basics by heart, look up corner cases, apply the rules religiously, and your programs will be better than those written by the majority of university graduates.&lt;/p&gt;

&lt;p&gt;仔细阅读规约，用心学习基础，不留死角，严格遵守规约，你的代码肯定就比绝大多数在校学生强了。&lt;/p&gt;

&lt;p&gt;Many organizations customize style guides to reflect the organization&amp;rsquo;s specific practices. For instance, Google has developed and released style guides for more than a dozen languages. These guides are well thought out, so check them out if you&amp;rsquo;re looking for help programming for Google. Guides even include editor settings to help you apply a programming style, and custom tools can verify that your code adheres to that style. Use these tools.&lt;/p&gt;

&lt;p&gt;很多公司会根据自己的需求定制自己的编程规约。比如，谷歌就针对10多种语言制定了自己的编程风格规约。这些规约都是经过仔细研究制定的，所以如果你想做谷歌相关编程，可以研究下。编程规约里甚至还会介绍如何设置编辑器，以便你更容易遵守规约，也可能会介绍用于检查你是否遵守规约的工具。要好好利用这些工具。&lt;/p&gt;

&lt;h2 id=&#34;rule-2-create-descriptive-names:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 2: Create Descriptive Names&lt;/h2&gt;

&lt;p&gt;Constrained by slow, clunky teletypes, programmers in the past used to contract the names of their variables and routines to save time, keystrokes, ink, and paper. This culture persists in some communities, in the name of backward compatibility; consider C&amp;rsquo;s tongue-twisting wcscspn (wide character string complement span) function. But there&amp;rsquo;s no excuse for this practice in modern code.&lt;/p&gt;

&lt;p&gt;Use long descriptive names, like complementSpanLength, to help yourself, now and in the future, as well as your colleagues to understand what the code does. The only exception to this rule concerns the few key variables used within a method&amp;rsquo;s body, such as a loop index, a parameter, an intermediate result, or a return value.&lt;/p&gt;

&lt;p&gt;Even more importantly, think long and hard before you name something. Is the name accurate? Did you mean highestPrice, rather than bestPrice? Is the name specific enough to avoid taking more than its fair share of semantic space? Should you name your method getBestPrice, rather than getBest? Does its form match that of other similar names? If you have a method ReadEventLog, you shouldn&amp;rsquo;t name another NetErrorLogRead. If you&amp;rsquo;re naming a function, does the name describe what the function returns?&lt;/p&gt;

&lt;p&gt;Finally, there are some easy naming rules. Class and type names should be nouns. Methods names should contain a verb. In particular, if a method returns a value indicating whether something holds true for an object, the method name should start with is. Other methods that return an object&amp;rsquo;s property should start with get, and those that set a property should start with set.&lt;/p&gt;

&lt;h2 id=&#34;rule-3-comment-and-document:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 3: Comment and Document&lt;/h2&gt;

&lt;p&gt;Start every routine you write (function or method) with a comment outlining what the routine does, its parameters, and what it returns, as well as possible errors and exceptions. Summarize in a comment the role of each file and class, the contents of each class field, and the major steps of complex code. Write the comments as you develop the code; if you think you&amp;rsquo;ll add them later, you&amp;rsquo;re kidding yourself.&lt;/p&gt;

&lt;p&gt;In addition, ensure that your code as a whole (for example, an application or library) comes with at least a guide explaining what it does; indicating its dependencies; and providing instructions on building, testing, installation, and use. This document should be short and sweet; a single README file is often enough.&lt;/p&gt;

&lt;h2 id=&#34;rule-4-don-t-repeat-yourself:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 4: Don&amp;rsquo;t Repeat Yourself&lt;/h2&gt;

&lt;p&gt;Never copy-and-paste code. Instead, abstract the common parts into a routine or class (or macro, if you must), and use it with appropriate parameters. More broadly, avoid duplicate instances of similar data or code. Keep a definitive version in one place, and let that version drive all other uses. Following are some good examples of this practice:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Creation of API reference guides from comments, using Javadoc or Doxygen
Automatic detection of unit tests through an annotation or a naming convention
Generation of both PDF and HTML documentation from a single markup source
Derivation of object classes from a database schema (or the opposite)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rule-5-check-for-errors-and-respond-to-them:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 5: Check for Errors and Respond to Them&lt;/h2&gt;

&lt;p&gt;Routines can return with an error indication, or they can raise an exception. Deal with it. Don&amp;rsquo;t assume that a disk will never fill up, your configuration file will always be there, your application will run with the required permissions, memory-allocation requests will always succeed, or that a connection will never time out. Yes, good error-handling is hard to write, and it makes the code longer and less readable. But ignoring errors and exceptions simply sweeps the problem under the carpet, where an unsuspecting end user will inevitably find it one day.&lt;/p&gt;

&lt;h2 id=&#34;rule-6-split-your-code-into-short-focused-units:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 6: Split Your Code into Short, Focused Units&lt;/h2&gt;

&lt;p&gt;Every method, function, or logical code block should fit on a reasonably-sized screen window (25–50 lines long). If it&amp;rsquo;s longer, split it into shorter pieces. An exception can be made for simple repetitive code sequences. However, in such cases, consider whether you could drive that code through a data table. Even within a routine, divide long code sequences into blocks whose function you can describe with a comment at the beginning of each block.&lt;/p&gt;

&lt;p&gt;Furthermore, each class, module, file, or process should concern one single thing. If a code unit undertakes diverse responsibilities, split it accordingly.&lt;/p&gt;

&lt;h2 id=&#34;rule-7-use-framework-apis-and-third-party-libraries:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 7: Use Framework APIs and Third-Party Libraries&lt;/h2&gt;

&lt;p&gt;Learn what functionality is available through an API in your programming framework, and also what&amp;rsquo;s commonly available through mature, widely adopted third-party libraries. Libraries supported by your system&amp;rsquo;s package manager are often a good bet. Use that code, resisting the temptation to reinvent the wheel (in a dysfunctional square shape).&lt;/p&gt;

&lt;h2 id=&#34;rule-8-don-t-overdesign:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 8: Don&amp;rsquo;t Overdesign&lt;/h2&gt;

&lt;p&gt;Keep your design focused on today&amp;rsquo;s needs. Your code can be general to accommodate future evolution, but only if that doesn&amp;rsquo;t make it more complex. Don&amp;rsquo;t create parameterized classes, factory methods, deep inheritance hierarchies, and arcane interfaces to solve problems that don&amp;rsquo;t yet exist—you can&amp;rsquo;t guess what tomorrow will bring. On the other hand, when the code&amp;rsquo;s structure no longer fits the task at hand, don&amp;rsquo;t shy away from refactoring it to a more appropriate design.&lt;/p&gt;

&lt;h2 id=&#34;rule-9-be-consistent:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 9: Be Consistent&lt;/h2&gt;

&lt;p&gt;Do similar things in similar ways. If you&amp;rsquo;re developing a routine whose functionality resembles that of an existing routine, use a similar name, the same parameter order, and a comparable structure for the code body. The same rule applies to classes: Give the new class similar fields and methods, make it adhere to the same interface, and match any new names with those already used in similar classes. Make the order and number of case statements or if else blocks follow the corresponding definition in the specifications you&amp;rsquo;re using. Keep unrelated items in alphabetical or numerical order.&lt;/p&gt;

&lt;p&gt;Your code should adopt the conventions of the framework in which you&amp;rsquo;re programming. For instance, it&amp;rsquo;s common practice to represent ranges half-open: closed (inclusive) on the left (the range&amp;rsquo;s beginning), but open (exclusive) on the right (the end). If there&amp;rsquo;s no a convention for a particular choice, establish one and follow it religiously.&lt;/p&gt;

&lt;h2 id=&#34;rule-10-avoid-security-pitfalls:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 10: Avoid Security Pitfalls&lt;/h2&gt;

&lt;p&gt;Modern code rarely works in isolation. Therefore it will inevitably risk becoming the target of malicious attacks. They don&amp;rsquo;t have to come from the Internet; the attack vector could be data fed into your application. Depending on your programming language and application domain, you might have to worry about buffer overflows, cross-site scripting, SQL injection, and similar problems. Learn what these problems are, and avoid them in your code. It&amp;rsquo;s not difficult.&lt;/p&gt;

&lt;h2 id=&#34;rule-11-use-efficient-data-structures-and-algorithms:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 11: Use Efficient Data Structures and Algorithms&lt;/h2&gt;

&lt;p&gt;Simple code is often more maintainable than equivalent code hand-tuned for efficiency. Fortunately, you can combine maintainability with efficiency by utilizing the data structures and algorithms provided by your programming framework. Use maps, sets, vectors, and the algorithms that work on them, and your code will be clearer, more scalable, faster, and memory-frugal. For example, if you keep a thousand values in an ordered set, a set intersection will find the values common with another set in a similar number of operations, rather than performing a million comparisons.&lt;/p&gt;

&lt;h2 id=&#34;rule-12-include-unit-tests:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 12: Include Unit Tests&lt;/h2&gt;

&lt;p&gt;The complexity of modern software makes it expensive to deploy a system and difficult to test it as a black box. A more productive approach is to accompany every small part of your code with tests that verify its correct function. This approach simplifies debugging by allowing you to catch errors early, close to their source. Unit testing is indispensable when you program with dynamically typed languages such as Python and JavaScript, because they&amp;rsquo;ll only catch at runtime any errors that that a statically typed language such as Java, C#, or C++ would catch at compile time. Unit testing also allows you to refactor the code with confidence. You can use an xUnit framework to simplify writing these tests and automate running them.
Rule 13: Keep Your Code Portable&lt;/p&gt;

&lt;p&gt;Unless you have some compelling reason, avoid using functionality that&amp;rsquo;s available only on a specific platform or framework. Don&amp;rsquo;t assume that particular data types (such as integers, pointers, and time) are of a given width (for example, 32 bits), because this differs between various platforms. Store the program&amp;rsquo;s messages separately from the code, and don&amp;rsquo;t hardcode cultural conventions such as a decimal separator or date format. Conventions need to change when your code runs in other countries around the world, so keep this adaptation as painless as possible.&lt;/p&gt;

&lt;h2 id=&#34;rule-14-make-your-code-buildable:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 14: Make Your Code Buildable&lt;/h2&gt;

&lt;p&gt;A single command should build your code into a form that&amp;rsquo;s ready for distribution. The command should allow you to perform fast incremental builds and run the required tests. To achieve this goal, use a build automation tool like Make, Apache Maven, or Ant. Ideally, you should set up a continuous integration system that will check, build, and test your code every time you make a change.&lt;/p&gt;

&lt;h2 id=&#34;rule-15-put-everything-under-version-control:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 15: Put Everything Under Version Control&lt;/h2&gt;

&lt;p&gt;All elements of your system—code, documentation, tool sources, build scripts, test data—should be under version control. Git and GitHub make this task cheap and hassle-free, but many other similarly powerful tools and services are available. You should be able to build and test your program on a properly configured system, simply by checking out the code from the repository.&lt;/p&gt;

&lt;h2 id=&#34;summary:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;By making these 15 rules part of your everyday programming practices, you&amp;rsquo;ll eventually create code that&amp;rsquo;s easier to read, thoroughly tested, more likely to run correctly, and much simpler to revise when that time comes. You&amp;rsquo;ll also save yourself and your program&amp;rsquo;s users a lot of headaches. For detailed examples of both good and bad code, check out my book Code Quality: The Open Source Perspective, which provides hundreds of examples taken from open source projects.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>（译）JavaScript简史</title>
      <link>http://gznotes.net/2015/11/06/javascript-brief-history/</link>
      <pubDate>Fri, 06 Nov 2015 06:07:16 JST</pubDate>
      
      <guid>http://gznotes.net/2015/11/06/javascript-brief-history/</guid>
      <description>

&lt;p&gt;这篇文章是我练习翻译的，原文参见&lt;a href=&#34;http://foorious.com/articles/brief-history-of-javascript/&#34;&gt;英语原文地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JavaScript这门编程语言很有传奇色彩。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScript is such a peculiar language.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;他是唯一一门基于prototype（而非class）的主流语言。很多人都对他有误解。人们曾经挺瞧不起这门语言，甚至争论他到底是不是一门真正的编程语言。可现在他正被广泛应用，包括在服务器端（node.js）。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It’s &lt;strong&gt;the only mainstream language that uses prototypes instead of classes&lt;/strong&gt;. It’s widely misunderstood.
Until a few years ago people would look down to it and even debate whether it was a real programming language or not—and now it’s used all over, including on servers (Node.js).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JavaScript如今已经变成了一门至关重要的编程语言。
他被广泛应用于各种联网设备，成为web平台（platform）的支柱和各种web/mobile应用（applications）的基础。借助于node.js，javascript在服务器端也大有用武之地，开始崭露头角。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScript has become an extremely important language. It’s ubiquitous in web-capable devices, a pillar of the Web Platform and the base for most web and mobile applications. Thanks to Node.js, it’s making its way on the server as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;为了理解javascript，咱们得先简单回顾一下浏览器和web的发展历程。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To understand JavaScript, however, we have to take a little detour and go back to the history of browsers and the Web.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;关于web:8ab2a088cb75a2d5ac5127849d769cad&#34;&gt;关于Web&lt;/h3&gt;

&lt;p&gt;1990年末，Tim Berners-Lee发明了World Wide Web.&lt;/p&gt;

&lt;p&gt;internet和web这两个词虽然经常被互换使用，感觉没啥差别，其实他们并不是不是一个东西。internet指的是有形的网络本身，出现也大大早于web。而web（world wide web）是我们每天在看，在用的东西：一个由无数超文本（hypertext）文档连成的网络。通过浏览器或者其他专用程序，我们每天都在访问这个巨大网络里的信息。&lt;/p&gt;

&lt;p&gt;internet刚刚出现后面临的一个问题是，由于电脑的差异性，虽然电脑可以互联，但是网络上的电脑却很可能无法互相沟通。这话放在21世纪说可能有点不可思议，不过早年标准化还没普及，好比虽然在海底铺了光缆，不懂外语的话，还是听不懂大洋对岸的洋人在说啥。一台电脑通过tcp/ip协议连接到另一台电脑了，但是文件格式不同，也就无法打开文件。这个问题导致虽然联网了电脑间很难协作和共享信息。&lt;/p&gt;

&lt;p&gt;web就是用来解决这个问题，让当时的科学家可以互相共享信息。&lt;/p&gt;

&lt;p&gt;解决方法具有革命性又很容易理解：把文档内容用一种通用语言（HTML）编码，然后用一个专门软件（浏览器）来解释，显示这个文档。每种电脑都有自己专门的浏览器，保证按照作者初衷正确显示文档，而文档本身保持不变。很简洁吧！&lt;/p&gt;

&lt;p&gt;所以呢，Tim Berners-Lee发明了web、第一个web服务器、第一个web浏览器（名字就叫WorldWideWeb）、第一个网页编辑器（WorldWideWeb本身也是个网页编辑器）还有第一个网页（其中介绍了他的相关工作内容）。&lt;/p&gt;

&lt;h3 id=&#34;browser-wars:8ab2a088cb75a2d5ac5127849d769cad&#34;&gt;Browser wars&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Mosaic&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tim Berners-Lee （还有很多人）当时只是把web当成科学家和研究者的信息交换工具。幸运的是，还是有些人注意到了web更大的潜力。&lt;/p&gt;

&lt;p&gt;一群伊利诺伊大学厄巴纳-香槟分校( University of Illinois Urbana-Champaign )的学生做出了Mosaic，这个浏览器软件另 World Wide Web流行起来。&lt;/p&gt;

&lt;p&gt;原因可能有许多，不过主要的原因可能是他们没有束缚于 Berners-Lee的想法，更进一步增加了IMG tag（想想一个网页如果没有任何图片会多枯燥。译者注），这另网页作者可以做出更漂亮的网页。&lt;/p&gt;

&lt;p&gt;这个浏览器软件广受欢迎，很快成为最流行的浏览器。Mosaic browser (1993)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Netscape Navigator&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;网景（ Netscape）公司挖走了Mosaic的创作者，让他们重新实现了一个浏览器，取名 Navigator。这个浏览器的生意让 Navigator 赚了一大笔钱。&lt;/p&gt;

&lt;p&gt;人们之所以愿意花钱买 Navigator，是因为 Navigator更加突破了 Berners-Lee的想法，并且实现了很多人们需要的好东西（原文写的useless，应该是笔误吧），比如很多可选字体和其他一些我们今天已经是标配的东西。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Microsoft&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Navigator当时很酷的，在所有操作系统都有几近相同的显示效果。另一个当时非常棒的功能是，通过一个基于web的系统（ web-based system ）用户可以编辑网络上其他电脑上的文件，即使那台电脑使用不同的操作系统。&lt;/p&gt;

&lt;p&gt;当然，微软容忍不了这个，因为这对windows业务不利。&lt;/p&gt;

&lt;p&gt;所以，微软发布了 Internet Explorer并且免费提供。之后还开始了一场臭名卓著的浏览器之战（ browser wars ）。&lt;/p&gt;

&lt;h3 id=&#34;javascript:8ab2a088cb75a2d5ac5127849d769cad&#34;&gt;JavaScript&lt;/h3&gt;

&lt;p&gt;总算讲到正题了！&lt;/p&gt;

&lt;p&gt;之后呢， Netscape就开发了 JavaScript，起初名字叫 LiveScript。&lt;/p&gt;

&lt;p&gt;LiveScript对 Netscape 公司至关重要。他们想实现一种类似苹果公司 HyperCard 的产品并把它加到浏览器里（ HyperCard 是 Apple Macintosh and Apple IIGS 上的一款编程工具，另开发者更容易开发软件）。另外， LiveScript 也可以运行于服务器端。&lt;/p&gt;

&lt;p&gt;这样， Netscape就可以用他们受欢迎的浏览器占据客户端业务市场，以及服务端市场。&lt;/p&gt;

&lt;h3 id=&#34;java-scheme-and-self:8ab2a088cb75a2d5ac5127849d769cad&#34;&gt;Java, Scheme, and Self&lt;/h3&gt;

&lt;p&gt;Netscape找到Brendan Eich来开发LiveScript。 Brendan Eich想基于Scheme开发LiveScript，可是Netscape的管理层认为人们不会喜欢 Scheme 的语法，让 Eich 把LiveScript设计得更像Java，Visual BASIC等当时受欢迎的语言。&lt;/p&gt;

&lt;p&gt;所以呢，LiveScript借用了Java的语法(因为不得不这样)， Scheme语言的函数模型(function model)和Self语言的基于prototype的特性( prototypical nature )。&lt;/p&gt;

&lt;p&gt;由于Netscape公司当时形式紧急， LiveScript语言从开始开发到发布只用了2个星期！！&lt;/p&gt;

&lt;h3 id=&#34;sun-以及-javascript-名字的由来:8ab2a088cb75a2d5ac5127849d769cad&#34;&gt;Sun, 以及“JavaScript”名字的由来&lt;/h3&gt;

&lt;p&gt;Netscape对微软的OS业务造成了威胁。微软开始采取动作后，Netscape找到了Sun联手进行反击。&lt;/p&gt;

&lt;p&gt;Sun和Netscape达成协议过程中有件事很有意思，那就是关于怎么对待LiveScript。Sun想用Java取而代之，但是Netscape不舍得自己的这个宝。&lt;/p&gt;

&lt;p&gt;然后呢，有个人（具体不详）想到个好主意：将LiveScript重命名为JavaScript。当然“Java”是Sun的注册商标，不过他们当时他们对这个提议也很赞同，给了Netscapte许可来使用“JavaScript”这个名字。&lt;/p&gt;

&lt;p&gt;成交！&lt;/p&gt;

&lt;h3 id=&#34;microsoft-s-jscript:8ab2a088cb75a2d5ac5127849d769cad&#34;&gt;Microsoft’s JScript&lt;/h3&gt;

&lt;p&gt;当然，微软的浏览器也需要个脚本语言。所以他们就模仿(reverse-engineer)JavaScript做了一个，集成到Internet  Explorer里了。&lt;/p&gt;

&lt;p&gt;因为“Java”这个名字是需要license的，他们只好取名JScript，其实和JavaScript完全是一个东西。&lt;/p&gt;

&lt;h3 id=&#34;ecmascript:8ab2a088cb75a2d5ac5127849d769cad&#34;&gt;ECMAScript&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;下面还没翻译&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With all this mess, JavaScript needed to be standardized. So, Netscape looked for a body that would do just that. The W3C refused to do it, and eventually they ended up at the European ECMA (weird).&lt;/p&gt;

&lt;p&gt;ECMA did standardize the language, but didn’t fix the obviously awful and confusing “JavaScript” name. The thing is, they didn’t know what to call it. So, they just published it with their working name: ECMAScript.&lt;/p&gt;

&lt;p&gt;JavaScript, JScript, and ECMAScript are sometimes thought to be different things, but are simply three different names that mean the same thing: JavaScript.
An unique language
JavaScript was (and is) truly unique.&lt;/p&gt;

&lt;p&gt;It doesn’t use classes, for instance: in every other programming language, objects are instances of a class, and inheritance works by extending an object’s class. Instead, JavaScript uses prototypes, which means that an object can be augmented by using other objects directly, without passing by classes.&lt;/p&gt;

&lt;p&gt;This is really awesome, and if you use prototypes you can still do classes (you can’t do the other way around), but inheriting directly from objects—along with its great function model—are what makes JavaScript such a powerful language.&lt;/p&gt;

&lt;p&gt;JavaScript (perhaps because of it “missing” classes?) used to be considered by many as a joke, and a language for amateurs.&lt;/p&gt;

&lt;p&gt;When Google popularized Ajax, JavaScript started gaining a lot of popularity, to eventually become one of the most popular programming languages in use today.
Current version&lt;/p&gt;

&lt;p&gt;ECMA is still in charge of the language. While at the time of writing (Oct, 2014) ES6 is the latest release and ES7 is already in the works, the most recent version that has broad browser support is ES5 (if you don’t need to support IE8). Old browsers support ES3 (ES4 was abandoned and was never released).&lt;/p&gt;

&lt;p&gt;ES5 is pretty great. It cleaned JavaScript up from a lot of design errorsthat the language  shipped with because of its quick/premature release. ES5 introduces “strict mode”, which allows developers to specify that they only wish to use features from the modern standard, and a lot of other interesting additions.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
