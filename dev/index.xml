<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title> on 钢子笔记 </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://localhost:1313/</link>
    <language>zh-cn</language>
    
    
    <updated>Wed, 10 Feb 2016 22:40:47 JST</updated>
    
    <item>
      <title>（译）15 Rules for Writing Quality Code</title>
      <link>http://localhost:1313/2016/02/10/15-rules-for-writing-quality-code/</link>
      <pubDate>Wed, 10 Feb 2016 22:40:47 JST</pubDate>
      
      <guid>http://localhost:1313/2016/02/10/15-rules-for-writing-quality-code/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.informit.com/articles/article.aspx?p=2223710&#34;&gt;英文原文地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Diomidis Spinellis, author of Code Quality: The Open Source Perspective, lists the 15 most important rules for writing sparkling code. Follow them, and your code will look professional, live long, grow smoothly, and earn your colleagues’ love (rather than swearing).&lt;/p&gt;

&lt;p&gt;对于如何写出高质量软件，《Code Quality: The Open Source Perspective》的作者Diomidis Spinellis列出了15条重要规则。遵守这些规则，你就可以写出专业的代码。而且你的代码会被持久使用，易于扩展。你的同事也会因此对你肃然起敬。&lt;/p&gt;

&lt;p&gt;There are myriad ways of writing poor code. Thankfully, rising to the level of writing quality programs involves just 15 rules. Following them won&amp;rsquo;t make you a master programmer, but will allow you to fake one quite convincingly.&lt;/p&gt;

&lt;p&gt;稍不留神我们就会写出一堆烂代码，写出好代码却不容易。不过，好在想写出高质量程序只需要下面的15条规则。遵守这些规则不能让你成为一位编程大师，不过会让你(提高不少)至少看起来很专业。&lt;/p&gt;

&lt;h2 id=&#34;rule-1-follow-the-style-guide:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 1: Follow the Style Guide&lt;/h2&gt;

&lt;p&gt;Every programming language has a style guide that tells you in great detail how to indent your code, where to put spaces and braces, how to name stuff, how to comment—all the good and bad practices. For example, the style guide tells you the 12 mistakes lurking in this code snippet:&lt;/p&gt;

&lt;p&gt;规则1：遵守编程规约。
每种编程语言都有编程规约。规约里会详细规定如何缩进，怎么合理安排余白和使用括号，如何给函数和变量等命名，怎么写注释等等，介绍很多好的和不好的做法。比如：编程规约里会举下面的例子，告诉你里面隐藏了12个编程规约方面的错误。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;for(i=0 ;i&amp;lt;10 ;i++){
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;钢子：我实在找不出12个，可能是老外夸张？
我找到的只有： 1. 常数10应该用个更有意义的变量或者常量代替 2. 再多用些空格分隔。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Read the guide carefully, learn the basics by heart, look up corner cases, apply the rules religiously, and your programs will be better than those written by the majority of university graduates.&lt;/p&gt;

&lt;p&gt;仔细阅读规约，用心学习基础，不留死角，严格遵守规约，你的代码肯定就比绝大多数在校学生强了。&lt;/p&gt;

&lt;p&gt;Many organizations customize style guides to reflect the organization&amp;rsquo;s specific practices. For instance, Google has developed and released style guides for more than a dozen languages. These guides are well thought out, so check them out if you&amp;rsquo;re looking for help programming for Google. Guides even include editor settings to help you apply a programming style, and custom tools can verify that your code adheres to that style. Use these tools.&lt;/p&gt;

&lt;p&gt;很多公司会根据自己的需求定制自己的编程规约。比如，谷歌就针对10多种语言制定了自己的编程风格规约。这些规约都是经过仔细研究制定的，所以如果你想做谷歌相关编程，可以研究下。编程规约里甚至还会介绍如何设置编辑器，以便你更容易遵守规约，也可能会介绍用于检查你是否遵守规约的工具。要好好利用这些工具。&lt;/p&gt;

&lt;h2 id=&#34;rule-2-create-descriptive-names:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 2: Create Descriptive Names&lt;/h2&gt;

&lt;p&gt;Constrained by slow, clunky teletypes, programmers in the past used to contract the names of their variables and routines to save time, keystrokes, ink, and paper. This culture persists in some communities, in the name of backward compatibility; consider C&amp;rsquo;s tongue-twisting wcscspn (wide character string complement span) function. But there&amp;rsquo;s no excuse for this practice in modern code.&lt;/p&gt;

&lt;p&gt;Use long descriptive names, like complementSpanLength, to help yourself, now and in the future, as well as your colleagues to understand what the code does. The only exception to this rule concerns the few key variables used within a method&amp;rsquo;s body, such as a loop index, a parameter, an intermediate result, or a return value.&lt;/p&gt;

&lt;p&gt;Even more importantly, think long and hard before you name something. Is the name accurate? Did you mean highestPrice, rather than bestPrice? Is the name specific enough to avoid taking more than its fair share of semantic space? Should you name your method getBestPrice, rather than getBest? Does its form match that of other similar names? If you have a method ReadEventLog, you shouldn&amp;rsquo;t name another NetErrorLogRead. If you&amp;rsquo;re naming a function, does the name describe what the function returns?&lt;/p&gt;

&lt;p&gt;Finally, there are some easy naming rules. Class and type names should be nouns. Methods names should contain a verb. In particular, if a method returns a value indicating whether something holds true for an object, the method name should start with is. Other methods that return an object&amp;rsquo;s property should start with get, and those that set a property should start with set.&lt;/p&gt;

&lt;h2 id=&#34;rule-3-comment-and-document:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 3: Comment and Document&lt;/h2&gt;

&lt;p&gt;Start every routine you write (function or method) with a comment outlining what the routine does, its parameters, and what it returns, as well as possible errors and exceptions. Summarize in a comment the role of each file and class, the contents of each class field, and the major steps of complex code. Write the comments as you develop the code; if you think you&amp;rsquo;ll add them later, you&amp;rsquo;re kidding yourself.&lt;/p&gt;

&lt;p&gt;In addition, ensure that your code as a whole (for example, an application or library) comes with at least a guide explaining what it does; indicating its dependencies; and providing instructions on building, testing, installation, and use. This document should be short and sweet; a single README file is often enough.&lt;/p&gt;

&lt;h2 id=&#34;rule-4-don-t-repeat-yourself:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 4: Don&amp;rsquo;t Repeat Yourself&lt;/h2&gt;

&lt;p&gt;Never copy-and-paste code. Instead, abstract the common parts into a routine or class (or macro, if you must), and use it with appropriate parameters. More broadly, avoid duplicate instances of similar data or code. Keep a definitive version in one place, and let that version drive all other uses. Following are some good examples of this practice:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Creation of API reference guides from comments, using Javadoc or Doxygen
Automatic detection of unit tests through an annotation or a naming convention
Generation of both PDF and HTML documentation from a single markup source
Derivation of object classes from a database schema (or the opposite)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rule-5-check-for-errors-and-respond-to-them:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 5: Check for Errors and Respond to Them&lt;/h2&gt;

&lt;p&gt;Routines can return with an error indication, or they can raise an exception. Deal with it. Don&amp;rsquo;t assume that a disk will never fill up, your configuration file will always be there, your application will run with the required permissions, memory-allocation requests will always succeed, or that a connection will never time out. Yes, good error-handling is hard to write, and it makes the code longer and less readable. But ignoring errors and exceptions simply sweeps the problem under the carpet, where an unsuspecting end user will inevitably find it one day.&lt;/p&gt;

&lt;h2 id=&#34;rule-6-split-your-code-into-short-focused-units:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 6: Split Your Code into Short, Focused Units&lt;/h2&gt;

&lt;p&gt;Every method, function, or logical code block should fit on a reasonably-sized screen window (25–50 lines long). If it&amp;rsquo;s longer, split it into shorter pieces. An exception can be made for simple repetitive code sequences. However, in such cases, consider whether you could drive that code through a data table. Even within a routine, divide long code sequences into blocks whose function you can describe with a comment at the beginning of each block.&lt;/p&gt;

&lt;p&gt;Furthermore, each class, module, file, or process should concern one single thing. If a code unit undertakes diverse responsibilities, split it accordingly.&lt;/p&gt;

&lt;h2 id=&#34;rule-7-use-framework-apis-and-third-party-libraries:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 7: Use Framework APIs and Third-Party Libraries&lt;/h2&gt;

&lt;p&gt;Learn what functionality is available through an API in your programming framework, and also what&amp;rsquo;s commonly available through mature, widely adopted third-party libraries. Libraries supported by your system&amp;rsquo;s package manager are often a good bet. Use that code, resisting the temptation to reinvent the wheel (in a dysfunctional square shape).&lt;/p&gt;

&lt;h2 id=&#34;rule-8-don-t-overdesign:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 8: Don&amp;rsquo;t Overdesign&lt;/h2&gt;

&lt;p&gt;Keep your design focused on today&amp;rsquo;s needs. Your code can be general to accommodate future evolution, but only if that doesn&amp;rsquo;t make it more complex. Don&amp;rsquo;t create parameterized classes, factory methods, deep inheritance hierarchies, and arcane interfaces to solve problems that don&amp;rsquo;t yet exist—you can&amp;rsquo;t guess what tomorrow will bring. On the other hand, when the code&amp;rsquo;s structure no longer fits the task at hand, don&amp;rsquo;t shy away from refactoring it to a more appropriate design.&lt;/p&gt;

&lt;h2 id=&#34;rule-9-be-consistent:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 9: Be Consistent&lt;/h2&gt;

&lt;p&gt;Do similar things in similar ways. If you&amp;rsquo;re developing a routine whose functionality resembles that of an existing routine, use a similar name, the same parameter order, and a comparable structure for the code body. The same rule applies to classes: Give the new class similar fields and methods, make it adhere to the same interface, and match any new names with those already used in similar classes. Make the order and number of case statements or if else blocks follow the corresponding definition in the specifications you&amp;rsquo;re using. Keep unrelated items in alphabetical or numerical order.&lt;/p&gt;

&lt;p&gt;Your code should adopt the conventions of the framework in which you&amp;rsquo;re programming. For instance, it&amp;rsquo;s common practice to represent ranges half-open: closed (inclusive) on the left (the range&amp;rsquo;s beginning), but open (exclusive) on the right (the end). If there&amp;rsquo;s no a convention for a particular choice, establish one and follow it religiously.&lt;/p&gt;

&lt;h2 id=&#34;rule-10-avoid-security-pitfalls:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 10: Avoid Security Pitfalls&lt;/h2&gt;

&lt;p&gt;Modern code rarely works in isolation. Therefore it will inevitably risk becoming the target of malicious attacks. They don&amp;rsquo;t have to come from the Internet; the attack vector could be data fed into your application. Depending on your programming language and application domain, you might have to worry about buffer overflows, cross-site scripting, SQL injection, and similar problems. Learn what these problems are, and avoid them in your code. It&amp;rsquo;s not difficult.&lt;/p&gt;

&lt;h2 id=&#34;rule-11-use-efficient-data-structures-and-algorithms:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 11: Use Efficient Data Structures and Algorithms&lt;/h2&gt;

&lt;p&gt;Simple code is often more maintainable than equivalent code hand-tuned for efficiency. Fortunately, you can combine maintainability with efficiency by utilizing the data structures and algorithms provided by your programming framework. Use maps, sets, vectors, and the algorithms that work on them, and your code will be clearer, more scalable, faster, and memory-frugal. For example, if you keep a thousand values in an ordered set, a set intersection will find the values common with another set in a similar number of operations, rather than performing a million comparisons.&lt;/p&gt;

&lt;h2 id=&#34;rule-12-include-unit-tests:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 12: Include Unit Tests&lt;/h2&gt;

&lt;p&gt;The complexity of modern software makes it expensive to deploy a system and difficult to test it as a black box. A more productive approach is to accompany every small part of your code with tests that verify its correct function. This approach simplifies debugging by allowing you to catch errors early, close to their source. Unit testing is indispensable when you program with dynamically typed languages such as Python and JavaScript, because they&amp;rsquo;ll only catch at runtime any errors that that a statically typed language such as Java, C#, or C++ would catch at compile time. Unit testing also allows you to refactor the code with confidence. You can use an xUnit framework to simplify writing these tests and automate running them.
Rule 13: Keep Your Code Portable&lt;/p&gt;

&lt;p&gt;Unless you have some compelling reason, avoid using functionality that&amp;rsquo;s available only on a specific platform or framework. Don&amp;rsquo;t assume that particular data types (such as integers, pointers, and time) are of a given width (for example, 32 bits), because this differs between various platforms. Store the program&amp;rsquo;s messages separately from the code, and don&amp;rsquo;t hardcode cultural conventions such as a decimal separator or date format. Conventions need to change when your code runs in other countries around the world, so keep this adaptation as painless as possible.&lt;/p&gt;

&lt;h2 id=&#34;rule-14-make-your-code-buildable:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 14: Make Your Code Buildable&lt;/h2&gt;

&lt;p&gt;A single command should build your code into a form that&amp;rsquo;s ready for distribution. The command should allow you to perform fast incremental builds and run the required tests. To achieve this goal, use a build automation tool like Make, Apache Maven, or Ant. Ideally, you should set up a continuous integration system that will check, build, and test your code every time you make a change.&lt;/p&gt;

&lt;h2 id=&#34;rule-15-put-everything-under-version-control:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Rule 15: Put Everything Under Version Control&lt;/h2&gt;

&lt;p&gt;All elements of your system—code, documentation, tool sources, build scripts, test data—should be under version control. Git and GitHub make this task cheap and hassle-free, but many other similarly powerful tools and services are available. You should be able to build and test your program on a properly configured system, simply by checking out the code from the repository.&lt;/p&gt;

&lt;h2 id=&#34;summary:5e1ccb98e0ae4458c6ef9434df04c806&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;By making these 15 rules part of your everyday programming practices, you&amp;rsquo;ll eventually create code that&amp;rsquo;s easier to read, thoroughly tested, more likely to run correctly, and much simpler to revise when that time comes. You&amp;rsquo;ll also save yourself and your program&amp;rsquo;s users a lot of headaches. For detailed examples of both good and bad code, check out my book Code Quality: The Open Source Perspective, which provides hundreds of examples taken from open source projects.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>刚毕业的新人缺什么技能？</title>
      <link>http://localhost:1313/2016/02/10/skills-needed-for-students/</link>
      <pubDate>Wed, 10 Feb 2016 22:24:52 JST</pubDate>
      
      <guid>http://localhost:1313/2016/02/10/skills-needed-for-students/</guid>
      <description>

&lt;p&gt;参与过几次公司的新人面试，做过新人的师傅。发现刚毕业学生所缺少的技能有些共通之处。在此总结下。想的不完整，随时补充。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/skills-needed-for-students.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;进度意识:05a26dc74bb5bb17cc9cde65ea982a54&#34;&gt;进度意识&lt;/h2&gt;

&lt;p&gt;做项目都是有进度要求的。有些新人在自己进度落后的时候，不好意思说，希望通过自己努力能够挽回，当最终发现无力回天的时候，已经具体自己的预定提交日很近了。这个时候去和自己的leader说干不完，是新毕业生常犯的错误。&lt;/p&gt;

&lt;p&gt;为什么呢？&lt;/p&gt;

&lt;p&gt;参加工作了要逐渐对自己有所了解，能尽量提前判断自己是否有能力按照预期完成。如果没底就和leader说，这样leader也可以适时采取措施。如果预定周五交的作业，你周四说干不完，这是让leader很抓狂的事情。&lt;/p&gt;

&lt;h2 id=&#34;沟通效率:05a26dc74bb5bb17cc9cde65ea982a54&#34;&gt;沟通效率&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/communication.png&#34; alt=&#34;&#34; /&gt;

不能从对方立场出发，习惯于从自己的观点出发。只顾着说自己想要知道什么，不能够完整描述，导致对方不知道该如何回答。要知道两个人的信息是不对等的，你如果很唐突提一个问题，对方很可能理解不了你的真正意图。&lt;/p&gt;

&lt;p&gt;最近上CSDN，发现很多同学的问题都不好看懂。信息不全，重点不清。&lt;/p&gt;

&lt;p&gt;举个实际工作中的例子：作业中对于设计书内容有疑问需要通过邮件向设计者提问。不少工作经验少的同学问过去后，对方都觉得问得太突兀，不知道提问者的真正意图。所以后来规定，问问题要注意包括如下信息：
你在做什么事情/看设计书哪段的时候，遇到了什么问题，你是怎么理解的，存在什么疑问。&lt;/p&gt;

&lt;p&gt;沟通效率这个话题很大，也是工作后一直都需要提高的。可以真么说，你的沟通效率是和你的工资成正比的。别人问了几遍都得不到想要的信息，你如果一封邮件就问出来了，这是本事！&lt;/p&gt;

&lt;h2 id=&#34;报告-联络-商量:05a26dc74bb5bb17cc9cde65ea982a54&#34;&gt;报告，联络，商量&lt;/h2&gt;

&lt;p&gt;这个话题其实是从日语報告、連絡、相談翻译过来的。三个词头字发音=ほうれんそう，恰好是日语“菠菜”的发音，所以在对日项目里也戏称菠菜。&lt;/p&gt;

&lt;p&gt;报告：你从领导领到一个任务后，不但最后完成的时候，要给个结果报告，根据执行时间长短，一定要有中间报告，让领到可以掌握情况。如果让领到问你“那个工作做得如何了？”就失职了。这虽不是大事，但是做到了更显出你沟通的专业性&lt;/p&gt;

&lt;p&gt;联络：遇到别的部门，同事需要的信息，要适时联络。&lt;/p&gt;

&lt;p&gt;商量：遇到难题时或者不知如何取舍，找到合适的对象商量。&lt;/p&gt;

&lt;h2 id=&#34;处理邮件:05a26dc74bb5bb17cc9cde65ea982a54&#34;&gt;处理邮件&lt;/h2&gt;

&lt;p&gt;参加工作后，尤其是进入IT行业，电子邮件是必不可少的联络工具。&lt;/p&gt;

&lt;p&gt;新人写邮件常见的问题是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;邮件title不能概括邮件内容，甚至有时候没有title。&lt;/li&gt;
&lt;li&gt;邮件正文看了50字以上仍然不知道这封邮件什么目的。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这样的邮件说严重点：没准会被老板直接删了，或者干脆暂时忽略掉。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>毕业生就业，大公司还是小公司？</title>
      <link>http://localhost:1313/2016/02/10/big-company-or-small-company/</link>
      <pubDate>Wed, 10 Feb 2016 22:19:45 JST</pubDate>
      
      <guid>http://localhost:1313/2016/02/10/big-company-or-small-company/</guid>
      <description>&lt;p&gt;不只是毕业生，其实都有这个困惑。&lt;/p&gt;

&lt;p&gt;我觉得，其实都可以，关键看是不是能学到东西。&lt;/p&gt;

&lt;p&gt;小公司人少，上来个项目肯定什么工作都有机会。我毕业后进入第一家公司，正搞WCDMA的3G通信软件，我针对一个模块从需求分析一直到与运营商网侧设备的实网连调都参与了，收益匪浅。毕业十多年了，离开那家公司后一直在吃那家公司攒下的老底儿了。&lt;/p&gt;

&lt;p&gt;大公司人多，流程细致，如果自己不积极主动考虑自己的career，那很可能成为一颗螺钉，仅仅一颗螺钉而已，谁都可以替换的一颗最普通的螺钉。最近一个到我们项目的一同事，就是之前被钉在一个“体力活儿”的位置上了，一点提升都没有，眼见时间虚度，就抓住机会换项目了。&lt;/p&gt;

&lt;p&gt;以上是我的亲身体会，但不代表所有的大公司和小公司都上面这样。关键还是看做什么。&lt;/p&gt;

&lt;p&gt;个人觉得毕业在小公司历练一段还不错，大公司牛人多，重要的事排到新人来做很是需要运气和时间吧。&lt;/p&gt;

&lt;p&gt;如果你已经很牛，那考虑就少了，天高任鸟飞。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/career-opportunities.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>首次来日本的注意事项</title>
      <link>http://localhost:1313/2016/02/10/come-to-japan-first-time/</link>
      <pubDate>Wed, 10 Feb 2016 21:42:08 JST</pubDate>
      
      <guid>http://localhost:1313/2016/02/10/come-to-japan-first-time/</guid>
      <description>

&lt;p&gt;如果第一次来日本，有些地方需要注意的，这里总结下个人经验。&lt;/p&gt;

&lt;p&gt;我从2003年开始，来日本出差很多次了。写的可能有点多，如果没耐心看，可以等来日本前再看，或者来后作为参考。
日本相关的话题，有些敏感，我只能尽量客观。如话有偏颇，还望见谅。&lt;/p&gt;

&lt;h2 id=&#34;倒垃圾:1e888a0f5b9b3b6f87ba77993deef315&#34;&gt;倒垃圾&lt;/h2&gt;

&lt;p&gt;刚来时最不适应的就是倒垃圾。
垃圾分类很细，比如矿泉水瓶子就分三部分：瓶盖和外面贴的塑料纸算一类，瓶体本身另算一类单独扔。每天扔哪类垃圾都有规定。一般按周循环，个别按月。
垃圾分收费和免费的。例如每天厨房产生的生活垃圾是收费的，需要买专门垃圾袋。买垃圾袋就是交垃圾处理费了。&lt;/p&gt;

&lt;p&gt;各个地区对垃圾处理的规定大同小异，居住的地方一般都在明显位置张贴具体规定，或者免费发放详细描述怎么处理垃圾的小册子。&lt;/p&gt;

&lt;h2 id=&#34;坐车:1e888a0f5b9b3b6f87ba77993deef315&#34;&gt;坐车&lt;/h2&gt;

&lt;p&gt;坐车需要排队。比如坐电车一般是在电车门的两侧各排一队。电车站台地面上都标出停车位置了。电车进站后也肯定会准确停在那个位置。所以在标示的停车位置排队等车就好了，不用车来了跟着车跑。车门开后，先下后上。电车上经常那个能看到宣传画。比如下面的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/manner-train.jpg&#34; alt=&#34;坐车的礼节&#34; /&gt;

上图依次意思是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;自己的包裹不要占座（放在架上）&lt;/li&gt;
&lt;li&gt;坐姿不要影响别人&lt;/li&gt;
&lt;li&gt;不要聚在一起大声说话（影响别人就坐）&lt;/li&gt;
&lt;li&gt;看报纸不要太占地方&lt;/li&gt;
&lt;li&gt;不要大声打电话&lt;/li&gt;
&lt;li&gt;听音乐注意不要声音漏音明显&lt;/li&gt;
&lt;li&gt;另个人不要隔着老远大声说话&lt;/li&gt;
&lt;li&gt;不要坐在车的地板上（妨碍他人通过）&lt;/li&gt;
&lt;li&gt;不要在车门即将关闭时上车（危险）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;每节车厢都有优先席。中国讲究尊老爱幼，但是日本似乎只尊老，不给小孩让座。除非是抱着小宝宝的妈妈。&lt;/p&gt;

&lt;p&gt;优先席附近要求关掉电话（实际上很少有人关吧），因为用心脏起搏器等体内设备的人多。尤其是通话时电波较强，可能会影响设备工作。&lt;/p&gt;

&lt;p&gt;公交车车厢内有很多（真的挺多，所以你在任何位置都可以按到）按钮，如果下站下车，按下按钮就可以了。&lt;/p&gt;

&lt;p&gt;公交车一般是中门上，前门下。如果不是始发站上车，上车时注意上车的门附近可能有个出整理券的机器，上车时拽一张，证明你的上车地点。整理券上面有个号码。车前面有显示器，显示各整理券号码对应需要的车费。整理券下车时和车费一起投入料金箱（投币箱）。&lt;/p&gt;

&lt;h2 id=&#34;说话:1e888a0f5b9b3b6f87ba77993deef315&#34;&gt;说话&lt;/h2&gt;

&lt;p&gt;音量要注意不要过大，以免影响周围的人。国内大多没有这个限制，畅所欲言，尤其咱们北方人。
具体多大呢？也不至于为了不影响别人就不说话了吧？ 这个也没那么严重，观察下周围人就知道了。
举例：电梯、电车等与别人距离特近的地方。&lt;/p&gt;

&lt;h2 id=&#34;走路:1e888a0f5b9b3b6f87ba77993deef315&#34;&gt;走路&lt;/h2&gt;

&lt;p&gt;日本路窄人多，所以要避免几个朋友横成一排走，以免后面的人过不去。过马路看信号灯。这一点来了就知道了，这方面大多日本人是比较固执的：即使没有车只要绿灯不亮就不走。在斑马线车让人的原则，大多司机都能遵守，而且是你不走他就一直等。&lt;/p&gt;

&lt;h2 id=&#34;买东西:1e888a0f5b9b3b6f87ba77993deef315&#34;&gt;买东西&lt;/h2&gt;

&lt;p&gt;这几天公司楼下便利店发生一件事：一对上海来的新婚夫妇，女的没结帐就在店内吃冰淇凌。店员上前阻止并示意到外面吃的时候，男的认为他妻子受到侮辱，对店员拳脚相加。我的理解，除了不懂日语，还有就是不知道日本便利店，超市是不允许结帐前品尝的吧。&lt;/p&gt;

&lt;p&gt;在自动贩卖机前买东西时，如果自己一时不知道买什么或者操作不明白，后面又排很长队，最后让后面的人先买。&lt;/p&gt;

&lt;h2 id=&#34;银行:1e888a0f5b9b3b6f87ba77993deef315&#34;&gt;银行&lt;/h2&gt;

&lt;p&gt;ATM在晚上和周末取钱需要手续费，一般108日元。各个银行的收费时间段略有不同。 取款机是可以出硬币的，可以取零钱。&lt;/p&gt;

&lt;p&gt;窗口周末和节假日一般不营业，平日营业到下午4点，早的到3点。这点和国内不同，需要注意。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Static控件的一个隐蔽特性</title>
      <link>http://localhost:1313/2016/02/06/static-notify/</link>
      <pubDate>Sat, 06 Feb 2016 23:02:50 JST</pubDate>
      
      <guid>http://localhost:1313/2016/02/06/static-notify/</guid>
      <description>

&lt;p&gt;Static控件常用来显示文字列，一般不会和用户有别的交互。&lt;/p&gt;

&lt;p&gt;但是，从WindowsVista之后，多了了一个很多人不知道的功能：&lt;br&gt;双击带有SS_NOTIFY属性的Static控件，windows会将Static内容copy到剪贴板。&lt;/p&gt;

&lt;h2 id=&#34;到底怎么回事:dc6047e2f849f9f1b53b738904bb61f6&#34;&gt;到底怎么回事？&lt;/h2&gt;

&lt;p&gt;一个带有SS_NOTIFY属相的Static控件，比较常见的处理是:&lt;br&gt;在收到WS_LBUTTONDBLCLK消息后，向父窗口发WM_COMMAND告知自己被双击(STN_DBLCLK)。&lt;/p&gt;

&lt;p&gt;在Vista之后，还会GetWindowText()得到Static的文字列，放到剪贴板里。
挺贴心，不过有点隐蔽。有时候也添了点小麻烦。&lt;/p&gt;

&lt;h2 id=&#34;一点麻烦:dc6047e2f849f9f1b53b738904bb61f6&#34;&gt;一点麻烦&lt;/h2&gt;

&lt;p&gt;在Vista之前开发的软件，有的是依赖双击Static后Static向父窗口发的WM_COMMAND来弹出其他画面的。
那么，下面的情况就让用户有点意外了：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在其他程序里copy一点内容&lt;/li&gt;
&lt;li&gt;双击Static&lt;/li&gt;
&lt;li&gt;在新打开的画面粘贴刚刚copy的内容&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上面第3部贴出来的是Static的文字列，用户就会抱怨：这是肿么回事呢？？&lt;/p&gt;

&lt;h2 id=&#34;怎么解决:dc6047e2f849f9f1b53b738904bb61f6&#34;&gt;怎么解决？&lt;/h2&gt;

&lt;p&gt;虽说这是微软加的功能，但是客户如果不喜欢，就得想办法解决。&lt;/p&gt;

&lt;p&gt;简单讲就是将Static控件的消息处理函数(WndProc)替换成自己写的。
在自己写的WndProc里，对WS_LBUTTONDBLCLK做特殊处理。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;BOOL disableCopyOnDblClickStatic(HANDLE hStatic)
{
	// 得到默认的WndProc
	WNDPROC pOldWndProc = (WNDPROC)GetWindowLong(hStatic, GWL_WNDPROC);
	// 让Static自己管理这个默认WndProc：这样在新WndProc里，就可以得到了。
	SetWindowProc(hStatic,GWL_USERDATA, (LONG)pOldWndProc);

	// 下面newWndProc是给Static新写的WndProc，
	// 收到WS_LBUTTONDBLCLK后，只给父窗口发个WM_COMMAND就直接返回。
	// 其他消息通过CallWndProc函数继续使用windows默认处理
	SetWindowProc(hStatic,GWL_WNDPROC, (LONG)newWndProc);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;这么修改的优缺点:dc6047e2f849f9f1b53b738904bb61f6&#34;&gt;这么修改的优缺点&lt;/h2&gt;

&lt;p&gt;缺点：需要针对每个有问题的Static控件进行修改。&lt;/p&gt;

&lt;p&gt;优点：打击面不会太大，因为不能保证所有画面里，这个动作都被认为是bug(那样的话，就显得微软太蠢了哈。。)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>用javascript&#43;cookie判断用户是否首次访问网站</title>
      <link>http://localhost:1313/2015/12/07/javascript-new-visitor/</link>
      <pubDate>Mon, 07 Dec 2015 11:33:43 JST</pubDate>
      
      <guid>http://localhost:1313/2015/12/07/javascript-new-visitor/</guid>
      <description>

&lt;p&gt;有时，针对首次访问网站的用户，需要弹出特定的消息。
比如：本网站做了一个“向首次访问的用户做问卷调查”功能。&lt;/p&gt;

&lt;p&gt;实现方法：
在cookie里记录用户是否访问过的信息。通过javascript读写cookie。&lt;/p&gt;

&lt;h2 id=&#34;什么是cookie:a1026216791776b42e031d658490c506&#34;&gt;什么是cookie？&lt;/h2&gt;

&lt;p&gt;从安全角度考虑浏览器是不能直接写本地硬盘的。
不过有些信息需要本地保存，就发明了cookie这么个东西。
浏览器写入cookie的信息大小，可以写的cookie个数都有限制。
另外，cookie是可以设置期限的。例如：30天期限的话，30天后这个cookie就无效了（被删除了吧）。&lt;/p&gt;

&lt;p&gt;cookie的详细信息就请教google吧。&lt;/p&gt;

&lt;h2 id=&#34;一个实现细节:a1026216791776b42e031d658490c506&#34;&gt;一个实现细节&lt;/h2&gt;

&lt;p&gt;我在实现该功能的时候，仅当访客滚动页面快到底部时，才去判断用户是否首次访问。
如果是首次访问，就弹出对话框（DIV）询问是否愿意配合做&lt;a href=&#34;https://www.wenjuan.com/s/AFbMJj/&#34;&gt;问卷调查&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;代码:a1026216791776b42e031d658490c506&#34;&gt;代码&lt;/h2&gt;

&lt;p&gt;闲话少说吧，具体内容参见注释。
如果有没写清楚地，麻烦留言。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	// 绑定在页面滚动时间上的处理函数。每当用户滚动页面，这个函数都会被调用。
	$(window).scroll(function() {
		var bottom = $(document).height() - $(window).height();
		var position = $(this).scrollTop();
		if(position &amp;gt; 900 || // 仅当访客已经滚动一定范围（阅读一些内容）后
		position &amp;gt; bottom*0.67 ) //当页面较小时，按照比例算
		{
			var newVisitor = isNewVisitor();// 如果是新访客
			if(newVisitor === true)
			{
				// 动画弹出消息框
				$(&amp;quot;#invite-questionnaire&amp;quot;).animate({right:&amp;quot;0&amp;quot;, bottom:&amp;quot;0&amp;quot;}, 100);

				// 标记：已经向该访客弹出过消息。30天之内不要再弹
				setCookie(&amp;quot;gznotes-visited&amp;quot;,&amp;quot;true&amp;quot;, 30);
			}
		}
	});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;	// 访客点击“没空”后，用这个函数隐藏消息框
	function hideQuestionnaire()
	{
		$(&amp;quot;#invite-questionnaire&amp;quot;).css(&amp;quot;display&amp;quot;,&amp;quot;none&amp;quot;);
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function isNewVisitor() {
    // 从cookie读取“已经向访客提示过消息”的标志位
    var flg = getCookie(&amp;quot;gznotes-visited&amp;quot;);
    if (flg === &amp;quot;&amp;quot;) {
        return true;
    } else {
        return false;
    }
}
// 写cookie
function setCookie(cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + (exdays*24*60*60*1000));
    var expires = &amp;quot;expires=&amp;quot;+d.toUTCString();
    document.cookie = cname + &amp;quot;=&amp;quot; + cvalue + &amp;quot;; &amp;quot; + expires +&amp;quot;;path=/&amp;quot;;
} 
// 读cookie
function getCookie(cname) {
    var name = cname + &amp;quot;=&amp;quot;;
    var ca = document.cookie.split(&#39;;&#39;);
    for(var i=0; i&amp;lt;ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0)==&#39; &#39;) c = c.substring(1);
        if (c.indexOf(name) == 0) return c.substring(name.length,c.length);
    }
    return &amp;quot;&amp;quot;;
} 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>回调(callback)函数简介</title>
      <link>http://localhost:1313/2015/11/19/callback-function/</link>
      <pubDate>Thu, 19 Nov 2015 06:22:27 JST</pubDate>
      
      <guid>http://localhost:1313/2015/11/19/callback-function/</guid>
      <description>

&lt;p&gt;callback函数在软件设计中被广泛使用。可以说没有他就没有各种灵活的软件结构。
什么是callback函数？有哪些常见用法？&lt;/p&gt;

&lt;h2 id=&#34;什么是callback函数:a4282e720ad4b24a43241c1d2daaf3fd&#34;&gt;什么是callback函数&lt;/h2&gt;

&lt;p&gt;callback函数打个比方就是“卧底”。
即：A模块定义函数f，交给B模块调用。B模块掌握调用f的时机。f执行时与A模块有信息交互。&lt;/p&gt;

&lt;p&gt;一般来讲，因为f定义于A，所以会了解A的部分内部数据结构，也就方便其在执行时更新数据。&lt;/p&gt;

&lt;p&gt;当然，这只是一种可能性，f执行时也可能仅仅是向A发条消息就return了。&lt;/p&gt;

&lt;h2 id=&#34;举例1-windows的消息处理函数:a4282e720ad4b24a43241c1d2daaf3fd&#34;&gt;举例1：windows的消息处理函数&lt;/h2&gt;

&lt;p&gt;写过win32画面程序的同学应该都知道，我们写画面程序需要定义一个windowProc函数，处理windows消息。
这个函数就是一个callback函数。&lt;/p&gt;

&lt;p&gt;这个函数使我们的程序定义的，通过RegisterClass()函数将这个windowProc函数登录到windows系统。
windows系统在收到和我们窗口相关的消息时，就会调用我们提供的windowProc函数。&lt;/p&gt;

&lt;h2 id=&#34;举例2-避免模块间循环依赖:a4282e720ad4b24a43241c1d2daaf3fd&#34;&gt;举例2：避免模块间循环依赖&lt;/h2&gt;

&lt;p&gt;软件系统有很多是分层的，像是积木一样一层一层。。
一般来讲，都是上层利用下层的服务，调用下层提供的API。&lt;/p&gt;

&lt;p&gt;但是个别情况，下层也可能调用上层API，这样两个模块就循环依赖了！&lt;/p&gt;

&lt;p&gt;这个时候callback的解决办法是：下层提供一个callback登录函数，让上层提供一个callback函数。
这样形式上仍然是上层依赖下层，而下层就可以通过callback函数利用上层的服务了。&lt;/p&gt;

&lt;h2 id=&#34;举例3-c-的event:a4282e720ad4b24a43241c1d2daaf3fd&#34;&gt;举例3： C#的event&lt;/h2&gt;

&lt;p&gt;最近学了一点C#，发现画面类支持登录event，语法非常简单，记不清了，类似于这样吧：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;form.clickOK += handleOK()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;handleOK()是业务层定义的函数。&lt;/p&gt;

&lt;p&gt;这样，画面层就可以在不了解业务层的前提下，将画面时间传递给业务层了！&lt;/p&gt;

&lt;p&gt;要知道，“不知道”这件事在软件设计中很重要。也就是所谓的“关心分离” Separation of concerns.
各管各的，能不知道的一定不要知道，信息知道多了也就是有耦合了，给bug提供了温床。&lt;/p&gt;

&lt;p&gt;其他应该有很多例子，在实际工作中都会慢慢接触的。&lt;/p&gt;

&lt;p&gt;最后一句：callback函数，很好，很重要。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>什么时候需要订阅RSS？</title>
      <link>http://localhost:1313/2015/11/16/what-is-rss/</link>
      <pubDate>Mon, 16 Nov 2015 21:42:29 JST</pubDate>
      
      <guid>http://localhost:1313/2015/11/16/what-is-rss/</guid>
      <description>

&lt;p&gt;简单讲，RSS是一种PULL方式的信息取得机制。
如果你喜欢某网站的文章，但是又不想总来check有没有新文章，这个时候，订阅RSS就比较合适了。
在浏览器自带的，或者专用的RSS Reader里就可以随时看到该网站最新的信息。&lt;/p&gt;

&lt;h3 id=&#34;firefox里rss-reader的使用方法:163764c1ea2a98a424ec95eed0214ded&#34;&gt;Firefox里RSS Reader的使用方法&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/firefox-rss.jpg&#34; class=&#34;intext-left&#34;&gt;
点击该网站的RSS订阅链接后，Firefox会提示是否订阅。
订阅网站RSS后，在bookmark栏上增加了一个菜单项，类似于普通的bookmark。&lt;/p&gt;

&lt;p&gt;点开后上面是文章列表，如图。灰色的是已经读过的。&lt;/p&gt;

&lt;p&gt;以后随时点下这个bookmark就可以看到最新文章列表啦。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>虚函数原理</title>
      <link>http://localhost:1313/2015/11/09/virtual-function-cpp/</link>
      <pubDate>Mon, 09 Nov 2015 23:20:53 JST</pubDate>
      
      <guid>http://localhost:1313/2015/11/09/virtual-function-cpp/</guid>
      <description>

&lt;p&gt;我们都知道：子类继承父类的虚函数后，用父类指针可以调用子类函数，这也是实现多态的前提。&lt;/p&gt;

&lt;p&gt;那么，C++是怎么实现这个特性的呢？
看看虚函数表的初始化过程，就不难理解其原理了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/polymorphism.jpg&#34; alt=&#34;多态、polymorphism&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;虚函数表的诞生:eb4eb720a450626098076a2276f7ac61&#34;&gt;虚函数表的诞生&lt;/h3&gt;

&lt;p&gt;在C++的对象里，如果我们定义了虚函数，编译器会在这个对象里自动增加一个数据成员：虚函数表(virtual function table)。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Person{
    public:
    virtual void sayHello(){printf(&amp;quot;Person hello&amp;quot;);}
    virtual void smile(){printf(&amp;quot;Person smile&amp;quot;);}
    private:
    int m_nAge;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例如：上面Person类里定义了2个虚函数，那么Person的Object的内存布局应该如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/vtbl.jpg&#34; alt=&#34;图1：虚函数表的产生&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;在VS2005的watch窗口可以看到（__vfptr）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/virtualtablebirth.jpg&#34; alt=&#34;图2：VS2005里看虚函数表&#34; /&gt;

(成员变量没有初始化，所以是0xcccccccc)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;class Student : public Person{
    public:
    virtual void smile(){printf(&amp;quot;Student smile&amp;quot;);}
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当子类继承父类的虚函数表后，子类内存布局如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/vtbl-student.jpg&#34; alt=&#34;图3：子类继承虚函数后虚函数表的变化&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/virtualtablechange.jpg&#34; alt=&#34;图4：VS2005看虚函数表的变化&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;这个变化过程是怎么实现的呢，let&amp;rsquo;s continue!&lt;/p&gt;

&lt;h3 id=&#34;虚函数表的初始化过程:eb4eb720a450626098076a2276f7ac61&#34;&gt;虚函数表的初始化过程&lt;/h3&gt;

&lt;p&gt;有父类的对象，先由父类初始化数据成员，然后由子类初始化数据成员。&lt;/p&gt;

&lt;p&gt;所以，Student::Student()函数之前，会执行Person::Person（）函数：将虚函数表里都写上了Person的函数；
而Student类继承了smile函数，所以会在Student::Student（）里将Person::smile()
替换(覆盖)成Student::smile()的地址（也就是图3里红色部分）。&lt;/p&gt;

&lt;p&gt;由于虚函数表位于C++对象内存布局的最前面，所以即使是父类的指针，也能访问到虚函数表。
通过父类指针调用虚函数表里函数的时候，只是根据函数的类型到相应位置取出函数地址，
而不会关心这个函数是父类的还是子类的。&lt;/p&gt;

&lt;p&gt;算是偷梁换柱吧:-)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/virtualtablesummary.jpg&#34; alt=&#34;图5：虚函数表的初始化过程&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>日本的WC为什么保持很干净？</title>
      <link>http://localhost:1313/2015/11/07/japan-wc/</link>
      <pubDate>Sat, 07 Nov 2015 11:48:58 JST</pubDate>
      
      <guid>http://localhost:1313/2015/11/07/japan-wc/</guid>
      <description>

&lt;p&gt;想想可能有这么几个原因：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;规则明确&lt;/li&gt;
&lt;li&gt;习惯使然&lt;/li&gt;
&lt;li&gt;清洁员负责&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;干净:079b54635e50b5353a9895fc990e246e&#34;&gt;干净&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/jp-wc.jpg&#34; alt=&#34;男子トイレ&#34; /&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;规则明确

&lt;ul&gt;
&lt;li&gt;很多男厕小便池前都有一块特殊颜色区域，标明了你最远可以站在什么位置。另外，这块区域一般是是用类似大理石材料铺的，会高处地面一块。
所以如果你站在线上，脚会不舒服。站在线外，又太远了，不能保证射程:-)。所以，最好还是站在线内。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;习惯使然

&lt;ul&gt;
&lt;li&gt;因为规则明确，时间长了不划线也会主动站近一点。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;清洁员负责

&lt;ul&gt;
&lt;li&gt;一次在公司去厕所，看见清洁员正跪在地上擦小便池。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;都有厕纸:079b54635e50b5353a9895fc990e246e&#34;&gt;都有厕纸&lt;/h2&gt;

&lt;p&gt;真没见过不带手纸的，包括公厕。是纸便宜还是怎么，貌似没听说过有带走厕纸的。&lt;/p&gt;

&lt;p&gt;一般男厕小便池上方都有放包的地方。&lt;/p&gt;

&lt;h2 id=&#34;女清洁员可能会不敲门进来:079b54635e50b5353a9895fc990e246e&#34;&gt;女清洁员可能会不敲门进来&lt;/h2&gt;

&lt;p&gt;这是不是也算男厕所干净的一个原因？:-) 站近点，防止走光哈！&lt;/p&gt;

&lt;p&gt;这次出差的大楼里，清洁员清扫中挂个牌子。大字写着“清扫中”，旁边小子写着“不过，可以用”。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>关于对话框中单选框焦点设定的一点调查</title>
      <link>http://localhost:1313/2015/11/07/radio-focus-in-dialog/</link>
      <pubDate>Sat, 07 Nov 2015 06:27:54 JST</pubDate>
      
      <guid>http://localhost:1313/2015/11/07/radio-focus-in-dialog/</guid>
      <description>

&lt;p&gt;对话框中单选框(radio button)的焦点控制，有点说道。&lt;/p&gt;

&lt;p&gt;比如，调用SetCheck()并不能让其完全处于选中状态，和手动点击达到的效果不同。&lt;/p&gt;

&lt;h3 id=&#34;对话框的消息处理函数-dialog-proc-返回值:04aade06df32a32d87036425c0a6b3de&#34;&gt;对话框的消息处理函数（dialog  proc）返回值&lt;/h3&gt;

&lt;p&gt;此函数返回值只有一个意思： 返回TRUE是告诉windows操作系统，把默认焦点设置到对话框资源（RC）文件里的第一个控件上。
对话框的RC文件是一个文本文件，修改控件在这个文件里的先后位置，也就可以修改画面初期显示后的默认焦点所在控件。&lt;/p&gt;

&lt;p&gt;不过，如果在dialog proc里，你通过SetFocus（）将焦点设置到别的控件上，就应该返回FALSE。否则操作系统还是会将焦点设置到第一个空间上。&lt;/p&gt;

&lt;h3 id=&#34;对话框的消息处理函数-dialog-proc-返回值-1:04aade06df32a32d87036425c0a6b3de&#34;&gt;对话框的消息处理函数（dialog proc）返回值&lt;/h3&gt;

&lt;p&gt;单选框（radio button）的焦点设定比较容易出问题。因为有时候视觉上radio button被选上了，但是一些内部状态没有设置，系统内部并不认为它被选上了，也就进一步影响按tab键时焦点的切换。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BM_SETCHECK只能让radio在视觉上变成选中状态,但实际上和通过点击达到的选中状态还是不同的。&lt;/li&gt;
&lt;li&gt;调用SetFocus()把焦点设置到这个radio button上，也仍然达不到手动鼠标点击实现的选中状态。这一点可以通过tab键提供焦点时，焦点的移动方式不同来证实。&lt;/li&gt;
&lt;li&gt;只有鼠标点击，才能让一个radio button处于完全的选中状态。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tab和4个arrow键在切换空间焦点操作上的作用并不相同:04aade06df32a32d87036425c0a6b3de&#34;&gt;Tab和4个Arrow键在切换空间焦点操作上的作用并不相同&lt;/h3&gt;

&lt;p&gt;Arrow可以在一个radio button group内移动焦点，而tab在更大的范围内。比如一个radio已经选上了，那么按tab键焦点就不会走到其之下的radio，而是跳过下面未选中的radio，走到这个radio group之下的控件。在切回到radio group的时候，焦点也只会在那个选中的radio停留。想在group内的各个radio之间移动，可以用四个Arrow键。&lt;/p&gt;

&lt;p&gt;上述内容主要参考这段的&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/ms645469(v=vs.85).aspx&#34;&gt;MSDN描述&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>C语言中static的用法举例</title>
      <link>http://localhost:1313/2015/11/07/static-in-c/</link>
      <pubDate>Sat, 07 Nov 2015 06:22:27 JST</pubDate>
      
      <guid>http://localhost:1313/2015/11/07/static-in-c/</guid>
      <description>

&lt;p&gt;C语言中static主要有以下用途。 分别举例说明一下。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;static局部变量&lt;/li&gt;
&lt;li&gt;static全局变量&lt;/li&gt;
&lt;li&gt;static函数&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;static局部变量:912a3409b2a9515793b0ede36f25b520&#34;&gt;static局部变量&lt;/h3&gt;

&lt;p&gt;普通的函数内局部变量的内存来自stack，
局部变量前加static，它的内存就不来自stack了，而是来自heap(①)。也就导致这个变量的生命期边长了：
程序启动时这个变量就被初始化，程序退出时，其内存才被收回。&lt;/p&gt;

&lt;p&gt;(①):应该是heap，抱歉这点暂时没有仔细研究。不知道和动态内存申请用的heap有何区别。&lt;/p&gt;

&lt;p&gt;另外，普通变量内存来自stack，也就决定了你不能申请size太大的局部变量。过大的话，编译器就报错了。&lt;/p&gt;

&lt;p&gt;举例：循环调用下面的函数，其函数返回值从0开始每次加1.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;int getValue()
{
	static int x = 0;
	return (x++);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这么做有什么用呢？举个实际例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct DbInfo{
	int x;
	int y;
}
int pDbInfo getValueFromDatabase(int key)
{
	static DbInfo* pDbInfo = NULL;
	static int nDbInfo = 0;
	if(NULL== pDbInfo)
	{
		getInfoFromDb(&amp;amp;pDbInfo);
	}
	for(int i=0 ;i &amp;lt; nDbInfo; i++)
	{
		if(key == pDbInfo[i].x)
		{
			return pDbInfo[i].y;
		}
	}
	return -1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面例子里，static变量保存了第一次从数据库得到的信息，可以防止重复访问数据库。
一点注意事项：如果是多线程环境下访问这个函数，就需要用信号量之类保护了。&lt;/p&gt;

&lt;h3 id=&#34;static全局变量:912a3409b2a9515793b0ede36f25b520&#34;&gt;static全局变量&lt;/h3&gt;

&lt;p&gt;全局变量和static局部变量的生命期相同，但是可见范围是整个程序。
全局变量用static修饰之后，它的可见范围变为所在文件。
这也算是C控制访问数据级别的一个方法吧。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;static int g_nInstanceNum = 0;
int main()
{
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如上定义一个static全局变量，即使在别的文件里用extern声明这个变量，链接器（linker）也会提示找不到。&lt;/p&gt;

&lt;h3 id=&#34;static函数:912a3409b2a9515793b0ede36f25b520&#34;&gt;static函数&lt;/h3&gt;

&lt;p&gt;和static全局变量类似，该函数的可见范围编程所在文件。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>（译）JavaScript简史</title>
      <link>http://localhost:1313/2015/11/06/javascript-brief-history/</link>
      <pubDate>Fri, 06 Nov 2015 06:07:16 JST</pubDate>
      
      <guid>http://localhost:1313/2015/11/06/javascript-brief-history/</guid>
      <description>

&lt;p&gt;这篇文章是我练习翻译的，原文参见&lt;a href=&#34;http://foorious.com/articles/brief-history-of-javascript/&#34;&gt;英语原文地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JavaScript这门编程语言很有传奇色彩。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScript is such a peculiar language.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;他是唯一一门基于prototype（而非class）的主流语言。很多人都对他有误解。人们曾经挺瞧不起这门语言，甚至争论他到底是不是一门真正的编程语言。可现在他正被广泛应用，包括在服务器端（node.js）。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It’s &lt;strong&gt;the only mainstream language that uses prototypes instead of classes&lt;/strong&gt;. It’s widely misunderstood.
Until a few years ago people would look down to it and even debate whether it was a real programming language or not—and now it’s used all over, including on servers (Node.js).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JavaScript如今已经变成了一门至关重要的编程语言。
他被广泛应用于各种联网设备，成为web平台（platform）的支柱和各种web/mobile应用（applications）的基础。借助于node.js，javascript在服务器端也大有用武之地，开始崭露头角。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScript has become an extremely important language. It’s ubiquitous in web-capable devices, a pillar of the Web Platform and the base for most web and mobile applications. Thanks to Node.js, it’s making its way on the server as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;为了理解javascript，咱们得先简单回顾一下浏览器和web的发展历程。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To understand JavaScript, however, we have to take a little detour and go back to the history of browsers and the Web.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;关于web:8ab2a088cb75a2d5ac5127849d769cad&#34;&gt;关于Web&lt;/h3&gt;

&lt;p&gt;1990年末，Tim Berners-Lee发明了World Wide Web.&lt;/p&gt;

&lt;p&gt;internet和web这两个词虽然经常被互换使用，感觉没啥差别，其实他们并不是不是一个东西。internet指的是有形的网络本身，出现也大大早于web。而web（world wide web）是我们每天在看，在用的东西：一个由无数超文本（hypertext）文档连成的网络。通过浏览器或者其他专用程序，我们每天都在访问这个巨大网络里的信息。&lt;/p&gt;

&lt;p&gt;internet刚刚出现后面临的一个问题是，由于电脑的差异性，虽然电脑可以互联，但是网络上的电脑却很可能无法互相沟通。这话放在21世纪说可能有点不可思议，不过早年标准化还没普及，好比虽然在海底铺了光缆，不懂外语的话，还是听不懂大洋对岸的洋人在说啥。一台电脑通过tcp/ip协议连接到另一台电脑了，但是文件格式不同，也就无法打开文件。这个问题导致虽然联网了电脑间很难协作和共享信息。&lt;/p&gt;

&lt;p&gt;web就是用来解决这个问题，让当时的科学家可以互相共享信息。&lt;/p&gt;

&lt;p&gt;解决方法具有革命性又很容易理解：把文档内容用一种通用语言（HTML）编码，然后用一个专门软件（浏览器）来解释，显示这个文档。每种电脑都有自己专门的浏览器，保证按照作者初衷正确显示文档，而文档本身保持不变。很简洁吧！&lt;/p&gt;

&lt;p&gt;所以呢，Tim Berners-Lee发明了web、第一个web服务器、第一个web浏览器（名字就叫WorldWideWeb）、第一个网页编辑器（WorldWideWeb本身也是个网页编辑器）还有第一个网页（其中介绍了他的相关工作内容）。&lt;/p&gt;

&lt;h3 id=&#34;browser-wars:8ab2a088cb75a2d5ac5127849d769cad&#34;&gt;Browser wars&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Mosaic&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tim Berners-Lee （还有很多人）当时只是把web当成科学家和研究者的信息交换工具。幸运的是，还是有些人注意到了web更大的潜力。&lt;/p&gt;

&lt;p&gt;一群伊利诺伊大学厄巴纳-香槟分校( University of Illinois Urbana-Champaign )的学生做出了Mosaic，这个浏览器软件另 World Wide Web流行起来。&lt;/p&gt;

&lt;p&gt;原因可能有许多，不过主要的原因可能是他们没有束缚于 Berners-Lee的想法，更进一步增加了IMG tag（想想一个网页如果没有任何图片会多枯燥。译者注），这另网页作者可以做出更漂亮的网页。&lt;/p&gt;

&lt;p&gt;这个浏览器软件广受欢迎，很快成为最流行的浏览器。Mosaic browser (1993)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Netscape Navigator&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;网景（ Netscape）公司挖走了Mosaic的创作者，让他们重新实现了一个浏览器，取名 Navigator。这个浏览器的生意让 Navigator 赚了一大笔钱。&lt;/p&gt;

&lt;p&gt;人们之所以愿意花钱买 Navigator，是因为 Navigator更加突破了 Berners-Lee的想法，并且实现了很多人们需要的好东西（原文写的useless，应该是笔误吧），比如很多可选字体和其他一些我们今天已经是标配的东西。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Microsoft&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Navigator当时很酷的，在所有操作系统都有几近相同的显示效果。另一个当时非常棒的功能是，通过一个基于web的系统（ web-based system ）用户可以编辑网络上其他电脑上的文件，即使那台电脑使用不同的操作系统。&lt;/p&gt;

&lt;p&gt;当然，微软容忍不了这个，因为这对windows业务不利。&lt;/p&gt;

&lt;p&gt;所以，微软发布了 Internet Explorer并且免费提供。之后还开始了一场臭名卓著的浏览器之战（ browser wars ）。&lt;/p&gt;

&lt;h3 id=&#34;javascript:8ab2a088cb75a2d5ac5127849d769cad&#34;&gt;JavaScript&lt;/h3&gt;

&lt;p&gt;总算讲到正题了！&lt;/p&gt;

&lt;p&gt;之后呢， Netscape就开发了 JavaScript，起初名字叫 LiveScript。&lt;/p&gt;

&lt;p&gt;LiveScript对 Netscape 公司至关重要。他们想实现一种类似苹果公司 HyperCard 的产品并把它加到浏览器里（ HyperCard 是 Apple Macintosh and Apple IIGS 上的一款编程工具，另开发者更容易开发软件）。另外， LiveScript 也可以运行于服务器端。&lt;/p&gt;

&lt;p&gt;这样， Netscape就可以用他们受欢迎的浏览器占据客户端业务市场，以及服务端市场。&lt;/p&gt;

&lt;h3 id=&#34;java-scheme-and-self:8ab2a088cb75a2d5ac5127849d769cad&#34;&gt;Java, Scheme, and Self&lt;/h3&gt;

&lt;p&gt;Netscape找到Brendan Eich来开发LiveScript。 Brendan Eich想基于Scheme开发LiveScript，可是Netscape的管理层认为人们不会喜欢 Scheme 的语法，让 Eich 把LiveScript设计得更像Java，Visual BASIC等当时受欢迎的语言。&lt;/p&gt;

&lt;p&gt;所以呢，LiveScript借用了Java的语法(因为不得不这样)， Scheme语言的函数模型(function model)和Self语言的基于prototype的特性( prototypical nature )。&lt;/p&gt;

&lt;p&gt;由于Netscape公司当时形式紧急， LiveScript语言从开始开发到发布只用了2个星期！！&lt;/p&gt;

&lt;h3 id=&#34;sun-以及-javascript-名字的由来:8ab2a088cb75a2d5ac5127849d769cad&#34;&gt;Sun, 以及“JavaScript”名字的由来&lt;/h3&gt;

&lt;p&gt;Netscape对微软的OS业务造成了威胁。微软开始采取动作后，Netscape找到了Sun联手进行反击。&lt;/p&gt;

&lt;p&gt;Sun和Netscape达成协议过程中有件事很有意思，那就是关于怎么对待LiveScript。Sun想用Java取而代之，但是Netscape不舍得自己的这个宝。&lt;/p&gt;

&lt;p&gt;然后呢，有个人（具体不详）想到个好主意：将LiveScript重命名为JavaScript。当然“Java”是Sun的注册商标，不过他们当时他们对这个提议也很赞同，给了Netscapte许可来使用“JavaScript”这个名字。&lt;/p&gt;

&lt;p&gt;成交！&lt;/p&gt;

&lt;h3 id=&#34;microsoft-s-jscript:8ab2a088cb75a2d5ac5127849d769cad&#34;&gt;Microsoft’s JScript&lt;/h3&gt;

&lt;p&gt;当然，微软的浏览器也需要个脚本语言。所以他们就模仿(reverse-engineer)JavaScript做了一个，集成到Internet  Explorer里了。&lt;/p&gt;

&lt;p&gt;因为“Java”这个名字是需要license的，他们只好取名JScript，其实和JavaScript完全是一个东西。&lt;/p&gt;

&lt;h3 id=&#34;ecmascript:8ab2a088cb75a2d5ac5127849d769cad&#34;&gt;ECMAScript&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;下面还没翻译&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With all this mess, JavaScript needed to be standardized. So, Netscape looked for a body that would do just that. The W3C refused to do it, and eventually they ended up at the European ECMA (weird).&lt;/p&gt;

&lt;p&gt;ECMA did standardize the language, but didn’t fix the obviously awful and confusing “JavaScript” name. The thing is, they didn’t know what to call it. So, they just published it with their working name: ECMAScript.&lt;/p&gt;

&lt;p&gt;JavaScript, JScript, and ECMAScript are sometimes thought to be different things, but are simply three different names that mean the same thing: JavaScript.
An unique language
JavaScript was (and is) truly unique.&lt;/p&gt;

&lt;p&gt;It doesn’t use classes, for instance: in every other programming language, objects are instances of a class, and inheritance works by extending an object’s class. Instead, JavaScript uses prototypes, which means that an object can be augmented by using other objects directly, without passing by classes.&lt;/p&gt;

&lt;p&gt;This is really awesome, and if you use prototypes you can still do classes (you can’t do the other way around), but inheriting directly from objects—along with its great function model—are what makes JavaScript such a powerful language.&lt;/p&gt;

&lt;p&gt;JavaScript (perhaps because of it “missing” classes?) used to be considered by many as a joke, and a language for amateurs.&lt;/p&gt;

&lt;p&gt;When Google popularized Ajax, JavaScript started gaining a lot of popularity, to eventually become one of the most popular programming languages in use today.
Current version&lt;/p&gt;

&lt;p&gt;ECMA is still in charge of the language. While at the time of writing (Oct, 2014) ES6 is the latest release and ES7 is already in the works, the most recent version that has broad browser support is ES5 (if you don’t need to support IE8). Old browsers support ES3 (ES4 was abandoned and was never released).&lt;/p&gt;

&lt;p&gt;ES5 is pretty great. It cleaned JavaScript up from a lot of design errorsthat the language  shipped with because of its quick/premature release. ES5 introduces “strict mode”, which allows developers to specify that they only wish to use features from the modern standard, and a lot of other interesting additions.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
